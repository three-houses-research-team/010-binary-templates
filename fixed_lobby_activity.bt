//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: fixed_lobby_activity.bin
//   Authors: [FF7] Sephiroth & Joschuka 
//   Version: 1.00
//   Purpose: Three Houses Tournament file mapping
//   History
//   1.00    2020-11-14   [FF7] Sephiroth - started this
//------------------------------------------------
LittleEndian();
#include "3H_Enums.bt"
#include "Stupid_Item_IDs.bt"

enum<ubyte> WeapIDByte
{
    Unarmed_,
    Broken_Sword_,
    Broken_Lance_,
    Broken_Axe_,
    Broken_Bow_,
    Broken_Gauntlet_,
    Iron_Sword_,
    Steel_Sword_,
    Silver_Sword_,
    Brave_Sword_,
    Killing_Edge_,
    Training_Sword_,
    Iron_Lance_,
    Steel_Lance_,
    Silver_Lance_,
    Brave_Lance_,
    Killer_Lance_,
    Training_Lance_,
    Iron_Axe_,
    Steel_Axe_,
    Silver_Axe_,
    Brave_Axe_,
    Killer_Axe_,
    Training_Axe_,
    Iron_Bow_,
    Steel_Bow_,
    Silver_Bow_,
    Brave_Bow_,
    Killer_Bow_,
    Training_Bow_,
    Iron_Gauntlets_,
    Steel_Gauntlets_,
    Silver_Gauntlets_,
    Training_Gauntlets_,
    Levin_Sword_,
    Bolt_Axe_,
    Magic_Bow_,
    Javalin_,
    Short_Spear_,
    Spear_,
    Hand_Axe_,
    Short_Axe_,
    Tomahawk_,
    Longbow_,
    Mini_Bow_,
    Armorslayer_,
    Rapier_,
    Horseslayer_,
    Hammer_,
    Blessed_Lance_,
    Blessed_Bow_,
    Devil_Sword_,
    Devil_Axe_,
    Wo_Dao_,
    Crescent_Sickle_,
    Sword_of_Seiros_,
    Sword_of_Begalta_,
    Sword_of_Moralta_,
    Cursed_Ashiya_Sword_,
    Sword_or_Zoltan_,
    Thunderbrand_,
    Blutgang_,
    Sword_of_the_Creator_,
    Lance_of_Zoltan_,
    Lance_of_Ruin_,
    Areadbhar_,
    Luin_,
    Spear_of_Assal_,
    Scythe_of_Sariel_,
    Arrow_of_Indra_,
    Freikugel_,
    Crusher_,
    Axe_of_Ukonvasara_,
    Axe_of_Zoltan_,
    Tathlum_Bow_,
    The_Inexhaustiable_,
    Bow_of_Zoltan_,
    Failnaught_,
    Dragon_Claw_,
    Mace_,
    Athame_,
    Ridill_,
    Aymr_,
    Dark_Sword_of_The_Creator_,
    Venin_Edge_,
    Venin_Lance_,
    Venin_Axe_,
    Venin_Bow_,
    Mercurius_,
    Gradivus_,
    Hauteclere_,
    Parthia_,
    Killer_Knuckles_,
    Aura_Knuckles_,
    Rusted_Sword_Iron_,
    Rusted_Sword_Steel_,
    Rusted_Sword_Silver_,
    Rusted_Sword_Brave_,
    Rusted_Sword_Mercurius_,
    Rusted_Lance_Iron_,
    Rusted_Lance_Steel_,
    Rusted_Lance_Silver_,
    Rusted_Lance_Brave_,
    Rusted_Lance_Gradivus_,
    Rusted_Axe_Iron_,
    Rusted_Axe_Steel_,
    Rusted_Axe_Silver_,
    Rusted_Axe_Brave_,
    Rusted_Axe_Hauteclere_,
    Rusted_Bow_Iron_,
    Rusted_Bow_Steel_,
    Rusted_Bow_Silver_,
    Rusted_Bow_Brave_,
    Rusted_Bow_Parthia_,
    Rusted_Gauntlets_Iron_,
    Rusted_Gauntlets_Steel_,
    Rusted_Gauntlets_Silver_,
    Rusted_Gauntlets_Dragon_Claws_,
    Iron_Sword_Plus_,
    Steel_Sword_Plus_,
    Silver_Sword_Plus_,
    Brave_Sword_Plus_,
    Killing_Edge_Plus_,
    Training_Sword_Plus_,
    Iron_Lance_Plus_,
    Steel_Lance_Plus_,
    Silver_Lance_Plus_,
    Brave_Lance_Plus_,
    Killer_Lance_Plus_,
    Training_Lance_Plus_,
    Iron_Axe_Plus_,
    Steel_Axe_Plus_,
    Silver_Axe_Plus_,
    Brave_Axe_Plus_,
    Killer_Axe_Plus_,
    Training_Axe_Plus_,
    Iron_Bow_Plus_,
    Steel_Bow_Plus_,
    Silver_Bow_Plus_,
    Brave_Bow_Plus_,
    Killer_Bow_Plus_,
    Training_Bow_Plus_,
    Iron_Gauntlets_Plus_,
    Steel_Gauntlets_Plus_,
    Silver_Gauntlets_Plus_,
    Training_Gauntlets_Plus_,
    Levin_Sword_Plus_,
    Bolt_Axe_Plus_,
    Magic_Bow_Plus_,
    Javalin_Plus_,
    Short_Spear_Plus_,
    Spear_Plus_,
    Hand_Axe_Plus_,
    Short_Axe_Plus_,
    Tomahawk_Plus_,
    Longbow_Plus_,
    Mini_Bow_Plus_,
    Armorslayer_Plus_,
    Rapier_Plus_,
    Horseslayer_Plus_,
    Hammer_Plus_,
    Blessed_Lance_Plus_,
    Blessed_Bow_Plus_,
    Devil_Sword_Plus_,
    Devil_Axe_Plus_,
    Wo_Dao_Plus_,
    Crescent_Sickle_Plus_,
    Cursed_Ashiya_Sword_Plus_,
    Sword_or_Zoltan_Plus_,
    Lance_of_Zoltan_Plus_,
    Arrow_of_Indra_Plus_,
    Axe_of_Zoltan_Plus_,
    Bow_of_Zoltan_Plus_,
    Dragon_Claw_Plus_,
    Mace_Plus_,
    Venin_Edge_Plus_,
    Venin_Lance_Plus_,
    Venin_Axe_Plus_,
    Vinen_Bow_Plus_,
    Killer_Knuckles_Plus_,
    Aura_Knuckles_Plus_,
    Sublime_Sword_of_the_Creator_,
    Dark_Thunderbrand_,
    Dark_Blutgang_,
    Dark_Lance_of_Ruin_,
    Dark_Areadbhar_,
    Dark_Luin_,
    Dark_Freikugel_,
    Dark_Crusher_,
    Dark_Failnaught_,
};

typedef struct TOURNEYDATA {
	for(j=0;j<EntryCount;j++){
    	struct{
        	local string weapon;
			ubyte unk0<bgcolor=cBlue,name="For Replacement slot", comment="Set to 255 for no replacement(allow a clone.). Match this to specify an alternative character slot if Character Base is recruited to the player's party.">;
			byte unk1<bgcolor=cBlue,name="Possibly gender", comment="put a comment here">;
			Names unk2<bgcolor=cBlue,name="Character Base (CharID)", comment="See Person Data">;
			EquipID unk4<bgcolor=cBlue,name="Accessory (EquipID)", comment="Some like Shield of Seiros may get downgraded if the player has obtained one">;
			ClassName unk5<bgcolor=cBlue,name="Class", comment="Opponent Class">;
			WeapIDByte unk6<bgcolor=cBlue,name="Weapon, add 10", comment="Some like (+) get downgraded">;
			SpellID unk7<bgcolor=cBlue,name="Magic", comment="Spell list may be elsewhere & may have spell list / skill requirement. Weapon needs to be 255">;
			AbilityID unk8<bgcolor=cBlue,name="Ability 1", comment="Ability slots #4 & #5 location unknown">;
			AbilityID unk9<bgcolor=cBlue,name="Ability 2", comment="Ability slots #4 & #5 location unknown">;
			AbilityID unk10<bgcolor=cBlue,name="Ability 3", comment="Ability slots #4 & #5 location unknown">;
			byte unk11<bgcolor=cBlue,name="unk0", comment="A total mystery">;
			
			if(unk6==255) weapon = EnumToString(unk7);
			else          weapon = EnumToString(unk6);
        }Tourney<read = Str("%-16s - %s", weapon, EnumToString(unk2) )>;
    }
}TourneyData;

enum<byte> Preferences {
    Neutral_p = 0,
    Like_p = 1,
    Dislike_p = -1,

};

enum<ubyte> Meal{
	Beast_Meat_Teppanyaki,
	Grilled_Herring,
	Saghert_and_Cream,
	Fish_and_Bean_Soup,
	Vegetable_Pasta_Salad,
	Small_Fish_Skewers,
	Sauteed_Jerky,
	Spicy_Fish_and_Turnip_Stew,
	Onion_Gratin_Soup,
	Sweet_and_Salty_Whitefish_Saute,
	Sweet_Bun_Trio,
	Fruit_and_Herring_Tart,
	Garreg_Mach_Meat_Pie,
	Fishermans_Bounty,
	Pheasant_Roast_with_Berry_Sauce,
	Cheesy_Verona_Stew,
	Fish_Sandwich,
	Pickled_Rabbit_Skewers,
	Country_Style_Red_Turnip_Plate,
	Super_Spicy_Fish_Dango,
	Peach_Sorbet,
	Pickled_Seafood_and_Vegetables,
	Two_Fish_Saute,
	Daphnel_Stew,
	Gronder_Meat_Skewers,
	Sauteed_Pheasant_and_Eggs,
	Gautier_Cheese_Gratin,
	Cabbage_and_Herring_Stew,
	Vegetable_Stir_Fry,
	Bourgeois_Pike,
	Fried_Crayfish,
	Derdriu_Style_Fried_Pheasant,
};

enum<ubyte> FactionMealPreference{
      FlameEmperorArmy_FMP,
      Thieves_FMP,
      RebelArmy_FMP,
      Rogues_FMP,
      Citizens_FMP,
      ChildrenOfTheGoddess_FMP,
};

enum<ubyte> SaveBlockID{
    MaleByleth_SBI = 0,
	FemaleByleth_SBI = 1,
	Edelgard_2_SBI = 2,
	Dimitri_3_SBI = 3,
	Claude_4_SBI = 4,
	Hubert_5_SBI = 5,
	Ferdinand_6_SBI = 6,
	Linhardt_7_SBI = 7,
	Caspar_8_SBI = 8,
	Bernadetta_9_SBI = 9,
	Dorothea_10_SBI = 10,
	Petra_11_SBI = 11,
	Dedue_12_SBI = 12,
	Felix_13_SBI = 13,
	Ashe_14_SBI = 14,
	Sylvain_15_SBI = 15,
	Mercedes_16_SBI = 16,
	Annette_17_SBI = 17,
	Ingrid_18_SBI = 18,
	Lorenz_19_SBI = 19,
	Raphael_20_SBI = 20,
	Ignatz_21_SBI = 21,
	Lysithea_22_SBI = 22,
	Marianne_23_SBI = 23,
	Hilda_24_SBI = 24,
	Leonie_25_SBI = 25,
	Seteth_26_SBI = 26,
	Flayn_27_SBI = 27,
	Hanneman_28_SBI = 28,
	Manuela_29_SBI = 29,
	Gilbert_30_SBI = 30,
	Alois_31_SBI = 31,
	Catherine_32_SBI = 32,
	Shamir_33_SBI = 33,
	Cyril_34_SBI = 34,
	Jeralt_35_SBI = 35,
	Rhea_36_SBI = 36,  
	InvalidSothis_SBI = 37, 
	
	Yuri_SBI = 38,
	Balthus_SBI = 39,
	Constance_SBI = 40,
	Hapi_SBI = 41,
	idkAelfric_SBI = 42,
	Jeritza_Playable_SBI = 43,
	Anna_Playable_SBI = 44,
};

struct sSilverSnowEnabledChaptersBitMask{
	ubyte bit0 : 1<name="CH 14 SS",comment="MonasteryScriptID = 19">;
	ubyte bit1 : 1<name="CH 15 SS",comment="MonasteryScriptID = 20">;
	ubyte bit2 : 1<name="CH 16 SS",comment="MonasteryScriptID = 21">;
	ubyte bit3 : 1<name="CH 18 SS",comment="MonasteryScriptID = 22">;
	ubyte bit4 : 1<name="CH 19 SS",comment="MonasteryScriptID = 23">;
	ubyte bit5 : 1<name="CH 20 SS",comment="MonasteryScriptID = 24">;
	ubyte bit6 : 1<name="CH 21 SS",comment="MonasteryScriptID = 25">;
	ubyte bit7 : 1<name="Unused",comment="MonasteryScriptID = 26">;
};
struct sCrimsonFlowerEnabledChaptersBitMask{
	ubyte bit0 : 1<name="CH 12 CF",comment="MonasteryScriptID = 13, alternative monastery at Tower of Black Winds">;
	ubyte bit1 : 1<name="CH 13 CF",comment="MonasteryScriptID = 14">;
	ubyte bit2 : 1<name="CH 14 CF",comment="MonasteryScriptID = 15">;
	ubyte bit3 : 1<name="CH 15 CF",comment="MonasteryScriptID = 16">;
	ubyte bit4 : 1<name="CH 16 CF",comment="MonasteryScriptID = 17">;
	ubyte bit5 : 1<name="CH 17 CF",comment="MonasteryScriptID = 18">;
	ubyte bit6 : 1<name="Does nothing",comment="handled in another data field">;
	ubyte bit7 : 1<name="Does nothing",comment="handled in anoth1er data field">;
};
struct sWhiteCloudsEnabledChaptersBitMask{
	ubyte bit0 : 1<name="Chapter 0",comment="MonasteryScriptID = 0">;
	ubyte bit1 : 1<name="Chapter 1",comment="MonasteryScriptID = 1">;
	ubyte bit2 : 1<name="Chapter 2",comment="MonasteryScriptID = 2">;
	ubyte bit3 : 1<name="Chapter 3",comment="MonasteryScriptID = 3">;
	ubyte bit4 : 1<name="Chapter 4",comment="MonasteryScriptID = 4">;
	ubyte bit5 : 1<name="Chapter 5",comment="MonasteryScriptID = 5">;
	ubyte bit6 : 1<name="Chapter 6",comment="MonasteryScriptID = 6">;
	ubyte bit7 : 1<name="Chapter 7",comment="MonasteryScriptID = 7">;
	ubyte bit8 : 1<name="Chapter 8",comment="MonasteryScriptID = 8">;
	ubyte bit9 : 1<name="Chapter 9",comment="MonasteryScriptID = 9">;
	ubyte bit10 : 1<name="Chapter 10",comment="MonasteryScriptID = 10">;
	ubyte bit11 : 1<name="Chapter 11",comment="MonasteryScriptID = 11">;
	ubyte bit12 : 1<name="Chapter 12 NonCF",comment="MonasteryScriptID = 12">;
	ubyte bit13 : 1<name="Does nothing",comment="handled in another data field">;
	ubyte bit14 : 1<name="Does nothing",comment="handled in another data field">;
	ubyte bit15 : 1<name="Does nothing",comment="handled in another data field">;
};

struct sAzureMoonEnabledChaptersBitMask{
	ubyte bit0 : 1<name="CH 14 AM", comment="MonasteryScriptID = 27">;
	ubyte bit1 : 1<name="CH 15 AM", comment="MonasteryScriptID = 28">;
	ubyte bit2 : 1<name="CH 16 AM", comment="MonasteryScriptID = 29">;
	ubyte bit3 : 1<name="CH 17 AM", comment="MonasteryScriptID = 30">;
	ubyte bit4 : 1<name="CH 18 AM", comment="MonasteryScriptID = 31">;
	ubyte bit5 : 1<name="CH 19 AM", comment="MonasteryScriptID = 32">;
	ubyte bit6 : 1<name="CH 20 AM", comment="MonasteryScriptID = 33">;
	ubyte bit7 : 1<name="CH 21 AM", comment="MonasteryScriptID = 34">;
};

struct sRoutesEnabledBitMask{
	ubyte bit0 : 1<name="Silver Snow", comment="Route=0">;
	ubyte bit1 : 1<name="Azure Moon", comment="Route=1">;
	ubyte bit2 : 1<name="Verdant Wind", comment="Route=2">;
	ubyte bit3 : 1<name="Crimson Flower", comment="Route=3">;
	ubyte bit4 : 1<name="Prologue", comment="Route=4">;
	ubyte bit5 : 1<name="Cindered Shadows", comment="Route=5">;
	ubyte bit6 : 1<name="Does Nothing?", comment="???">;
	ubyte bit7 : 1<name="Does Nothing?", comment="???">;
};
struct sVerdantWindEnabledChaptersBitMask{
	ubyte bit0 : 1<name="CH 14 VW", comment="MonasteryScriptID = 35">;
	ubyte bit1 : 1<name="CH 15 VW", comment="MonasteryScriptID = 36">;
	ubyte bit2 : 1<name="CH 16 VW", comment="MonasteryScriptID = 37">;
	ubyte bit3 : 1<name="CH 17 VW", comment="MonasteryScriptID = 38">;
	ubyte bit4 : 1<name="CH 18 VW", comment="MonasteryScriptID = 39">;
	ubyte bit5 : 1<name="CH 19 VW", comment="MonasteryScriptID = 40">;
	ubyte bit6 : 1<name="CH 20 VW", comment="MonasteryScriptID = 41">;
	ubyte bit7 : 1<name="CH 21 VW", comment="MonasteryScriptID = 42">;
};

enum<ubyte> FishTier{
    SmallFishShadow,
	LargeFishShadow,
	GiantFishShadow,
	GlimmeringFishShadow,
    StrangeFishShadow,
    SparklingFishShadow,
    InvalidFT6,
    InvalidFT7,
    InvalidFT8,
    InvalidFT9,  
};

enum<int> Seeds {
    Mixed_Herb_S,
    Western_Foldlan_S,
    Root_Vegetable_S,
    Magical_Herb_S,
    Noah_Fruit_S,
    Albinean_Nut_S,
    Vegetable_S,
    Northern_Foldlan_S,
    Verona_S,
    Morfis_Plum_S,
    Southern_Fodlan_S,
    Morfis_S,
    Nordsalat_S,
    Boa_Fruit_S,
    Albinean_S,
    Eastern_Fodlan_S,
    Magdred_Kirsch_S,
    Angelica_S,
    Mixed_Fruit_S,
    Albinean_Berry_S,
    Red_Flower_S,
    White_Flowers_S,
    Blue_Flowers_S,
    Purple_Flowers_S,
    Yellow_Flowers_S,
    Green_Flowers_S,
    Pale_Blue_Flower_S,
    Seed27,
    Seed28,
    Seed29,
    Seed30,
    Dedues_S,
};

struct UnitPreferences{ //0
	for (j = 0; j < EntryCount; j++){
		struct Unit {
			Names character<bgcolor=cRed>;
			Preferences Choir<name="Choir Preference", bgcolor=cSilver>;
			Preferences Cooking<name="Cooking Preference", bgcolor=cLtBlue>;
			short unkShort0x4;
		}preferences<name="Unit", read=EnumToString(character)>;
	}
};

struct sShareAMeal{ //1
	for (j = 0; j < EntryCount; j++){
		struct sShareAMealData {
			local Meal name=j;
			
			struct {
            	MiscItem Ingredient;
                byte ingredentMSB<hidden=true>;
            }Ingredients[3]<read=EnumToString(Ingredient)>;
			ubyte unkByte0x6;
			ubyte unkByte0x7;
			
			ubyte unkByte0x8;
			ubyte unkByte0x9;
			FactionMealPreference Faction;
			ubyte unkByte0xb;
			
			ubyte unkByte0xc;
			ubyte unkByte0xd;
			ubyte IngredientsCost[3];
			ubyte Padding;
		}mealPreferences<name="Meals", bgcolor=cSilver, read = EnumToString(name)>;
	}
};

struct Mealstuff{ //2
	for (j = 0; j < EntryCount; j++){
		struct MealPreferences {
			local Meal name=j;
			for(k =0; k<45;k++){
				struct sCharacterPreference{
					local SaveBlockID SaveID=k;
					Preferences Preference;
				}CharacterPreference<read=Str("%-9s - %s",EnumToString(Preference), EnumToString(SaveID))>;
			}
		}mealPreferences<name="Meal Preferences", bgcolor=cSilver, read = EnumToString(name)>;
	}
};

struct Block3{ //3
	for (j = 0; j < EntryCount; j++){
		struct Block3_Entry{
			sWhiteCloudsEnabledChaptersBitMask WhiteCloudsAdviceBoxAvailability<read = Str("%d %d %d %d  %d %d %d %d  %d %d %d %d  %d",bit0,bit1,bit2,bit3, bit4,bit5,bit6,bit7, bit8,bit9,bit10,bit11, bit12)>;
			CharID character<bgcolor=cRed>;
            sVerdantWindEnabledChaptersBitMask VerdantWindsAdviceBoxAvailability<read = Str("%d %d %d %d  %d %d %d %d",bit0,bit1,bit2,bit3, bit4,bit5,bit6,bit7)>;
            sSilverSnowEnabledChaptersBitMask SilverSnowAdviceBoxAvailability<read = Str("%d %d %d %d  %d %d %d",bit0,bit1,bit2,bit3, bit4,bit5,bit6)>;
            sCrimsonFlowerEnabledChaptersBitMask CrimsonFlowerAdviceBoxAvailability<read = Str("%d %d %d %d  %d %d",bit0,bit1,bit2,bit3, bit4,bit5)>;
            sAzureMoonEnabledChaptersBitMask AzureMoonAdviceBoxAvailability<read = Str("%d %d %d %d  %d %d %d %d",bit0,bit1,bit2,bit3, bit4,bit5,bit6,bit7)>;
		}entry<read=EnumToString(character), bgcolor=cLtBlue>;
	}
};

struct sLobbyActivity5{ //5
	for (j = 0; j < EntryCount; j++){
		struct sLobbyActivity5Entry {
            local FishTier FT=j;
            
			byte Unsure<comment="Seems to have multiple purposes so idk">;
            struct sLA5RollThresholds{
                byte Standard_FET<name="No Fish Event">;
	            byte FishOfMystery_FET<name="Fish of Mystery Event">;
	            byte GoldenFish_FET<name="Golden Fish Event">;
	            byte LotsOfLargeFish_FET<name="Lots of Large Fish Event">;
            }LA5Thresholds<name="Marginal Roll Thresholds">;
			byte unk[6]<name="Unused?">;
		}LobbyActivity5Entry<name="Fish Tier Roll Thresholds",read=EnumToString(FT)>;
	}
    byte padding2[2];
};

struct sFishingRollThresholds { //6
	for (j = 0; j < EntryCount; j++){
		struct Entries {
			struct sFishThresholds{
				byte RollThreshold0;
				byte RollThreshold1;
				byte RollThreshold2;
			};		
			sFishThresholds LargeFishThresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds StrangeFishThresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds GlimmeringFishThresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds SmallFishThresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds SparklingFishThresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds GiantFishThresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds Invalid6Thresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds Invalid7Thresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds Invalid8Thresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
			sFishThresholds Invalid9Thresholds<read=Str("%d %d %d",RollThreshold0,RollThreshold1,RollThreshold2)>;
		}RollThresholds;
	}
    byte padding2[2];
};

struct Fishing{ //7
	for (j = 0; j < EntryCount; j++){
		struct FishEntry {
			local GeneralMerchantItems Bait = 1400 + j;
				struct FishRewards{
					GeneralMerchantItems FishReward0;  
					GeneralMerchantItems FishReward1;  
					GeneralMerchantItems FishReward2;  
				};
				FishRewards FishReward<read="Large Fish Shadow">;
                FishRewards FishReward<read="Strange Fish Shadow">;
                FishRewards FishReward<read="Glimmering Fish Shadow">;
                FishRewards FishReward<read="Small Fish Shadow">;
                
                FishRewards FishReward<read="Sparkling Fish Shadow">;
                FishRewards FishReward<read="Giant Fish Shadow">;
                FishRewards FishReward<read="Unused6FishShadow">;
                FishRewards FishReward<read="Unused7FishShadow">;
                
                FishRewards FishReward<read="Unused8FishShadow">;
                FishRewards FishReward<read="Unused9FishShadow">;
		}fish<name="Fishing Rewards", read=EnumToString(Bait)>;;
	}
};	

struct Gardening{ //8
	for (j = 0; j < EntryCount; j++){
		struct GardeningEntry {
			struct Yield {
				 GeneralMerchantItems gardeningItem0;
                 GeneralMerchantItems gardeningItem1;
                 GeneralMerchantItems gardeningItem2;
                 GeneralMerchantItems gardeningItem3;
                 GeneralMerchantItems gardeningItem4;
			};
			local Seeds seed = j;
			GeneralMerchantItems StatBoosterSlot<name="Stat Booster Slot", name="Stat Booster">;
			Yield yield1_low<read="Yield Level 1 Low", name="Yield">;
			Yield yield1_high<read="Yield Level 1 High", name="Yield">;
			Yield yield2_low<read="Yield Level 2 Low", name="Yield">;
			Yield yield2_high<read="Yield Level 2 High", name="Yield">;
			Yield yield3_low<read="Yield Level 3 Low", name="Yield">;
			Yield yield3_high<read="Yield Level 3 High", name="Yield">;
		}gardeningYield<name="Seed Yield", read=EnumToString(seed)>;;
	}
};

struct SeedRank{ //9
	for (j = 0; j < EntryCount; j++){
		struct seedRank {
			local Seeds seed = j;
			ubyte rank;
		}rank<name="Rank", read=Str("%2d - %s",rank, EnumToString(seed))>;
	}
};

struct File {
    int count<bgcolor=cBlack>;
    struct PointerPair {
        int start<format=hex>;
        int length<format=hex>;
    } pointertable[count]<bgcolor=cRed>;
    
    local int i,j,k = 0;
    for(i = 0; i < count; i++){
        FSeek(pointertable[i].start);
        struct Entry {
        	local string name;
            int magic<bgcolor=cLtGreen>; // should be 00 19 12 16
            if (magic != 0x16121900) Exit(-1);
            int EntryCount<bgcolor=cLtGreen>;
            int Size<bgcolor=cLtGreen>;                
            int Padding[13]<bgcolor=cYellow>;

            if(Size == 12)//tourney data
            {
                TourneyData tourneyData;
                name = "Tourney";
            }
            else if(i==0){
            	UnitPreferences ActivityPreferences;
                name="Activity Preferences";
            }
            else if(i==1){
            	sShareAMeal Meals;
                name="Meals";
            }
            else if(i==2){
            	Mealstuff MealPreference;
                name="Meals Preference";
            }
            else if(i==3){
            	Block3 AdviceBox;
                name="Advice Box Availability";
            }
            else if (i==5){
            	sLobbyActivity5 FishTierRollThresholds;
                name="Fish Tier Roll Threshold";
            }
            else if (i==6){
            	sFishingRollThresholds FishingRollThresholds;
                name="Fishing Roll Threshold";
            }
            else if (i==7){
            	Fishing FishingRewards;
                name = "Fishing Rewards";
            }
            else if (i==8){
            	Gardening GardeningYields;
                name = "Gardening Yields";
            }
            else if (i==9){
            	SeedRank SeedRanks;
                name = "Seed Ranks";
            }
            else //other stuff, use generic struct in that case
            {
                struct Entires {
                    byte unk[entry.Size]<bgcolor=cBlue>;
                }entires[EntryCount];
                name = Str("Table %d",i);
            }
        } entry<name=name>;
    }
} file;

