//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: fixed_lobby_activity.bin
//   Authors: [FF7] Sephiroth & Joschuka 
//   Version: 1.00
//   Purpose: Three Houses Tournament file mapping
//   History
//   1.00    2020-11-14   [FF7] Sephiroth - started this
//------------------------------------------------
LittleEndian();
#include "3H_Enums.bt"

typedef struct TOURNEYDATA {

ubyte unk0<bgcolor=cBlue,name="For Replacement slot", comment="Set to 255 for no replacement(allow a clone.). Match this to specify an alternative character slot if Character Base is recruited to the player's party.">;
byte unk1<bgcolor=cBlue,name="Possibly gender", comment="put a comment here">;
Names unk2<bgcolor=cBlue,name="Character Base (CharID)", comment="See Person Data">;
EquipID unk4<bgcolor=cBlue,name="Accessory (EquipID)", comment="Some like Shield of Seiros may get downgraded if the player has obtained one">;
ClassName unk5<bgcolor=cBlue,name="Class", comment="Opponent Class">;
WeapID unk6<bgcolor=cBlue,name="Weapon, add 10", comment="Some like (+) get downgraded">;
SpellID unk7<bgcolor=cBlue,name="Magic", comment="Spell list may be elsewhere & may have spell list / skill requirement. Weapon needs to be 255">;
AbilityID unk8<bgcolor=cBlue,name="Ability 1", comment="Ability slots #4 & #5 location unknown">;
AbilityID unk9<bgcolor=cBlue,name="Ability 2", comment="Ability slots #4 & #5 location unknown">;
AbilityID unk10<bgcolor=cBlue,name="Ability 3", comment="Ability slots #4 & #5 location unknown">;
byte unk11<bgcolor=cBlue,name="unk0", comment="A total mystery">;

}TourneyData;

enum<byte> Preferences {
    Neutral_p = 0,
    Like_p = 1,
    Dislike_p = -1,

};

enum<ubyte> Meal{
	Beast_Meat_Teppanyaki,
	Grilled_Herring,
	Saghert_and_Cream,
	Fish_and_Bean_Soup,
	Vegetable_Pasta_Salad,
	Small_Fish_Skewers,
	Sauteed_Jerky,
	Spicy_Fish_and_Turnip_Stew,
	Onion_Gratin_Soup,
	Sweet_and_Salty_Whitefish_Saute,
	Sweet_Bun_Trio,
	Fruit_and_Herring_Tart,
	Garreg_Mach_Meat_Pie,
	Fishermans_Bounty,
	Pheasant_Roast_with_Berry_Sauce,
	Cheesy_Verona_Stew,
	Fish_Sandwich,
	Pickled_Rabbit_Skewers,
	Country_Style_Red_Turnip_Plate,
	Super_Spicy_Fish_Dango,
	Peach_Sorbet,
	Pickled_Seafood_and_Vegetables,
	Two_Fish_Saute,
	Daphnel_Stew,
	Gronder_Meat_Skewers,
	Sauteed_Pheasant_and_Eggs,
	Gautier_Cheese_Gratin,
	Cabbage_and_Herring_Stew,
	Vegetable_Stir_Fry,
	Bourgeois_Pike,
	Fried_Crayfish,
	Derdriu_Style_Fried_Pheasant,
};

enum<ubyte> FactionMealPreference{
      FlameEmperorArmy_FMP,
      Thieves_FMP,
      RebelArmy_FMP,
      Rogues_FMP,
      Citizens_FMP,
      ChildrenOfTheGoddess_FMP,
};

enum<ubyte> SaveBlockID{
    MaleByleth_SBI = 0,
	FemaleByleth_SBI = 1,
	Edelgard_2_SBI = 2,
	Dimitri_3_SBI = 3,
	Claude_4_SBI = 4,
	Hubert_5_SBI = 5,
	Ferdinand_6_SBI = 6,
	Linhardt_7_SBI = 7,
	Caspar_8_SBI = 8,
	Bernadetta_9_SBI = 9,
	Dorothea_10_SBI = 10,
	Petra_11_SBI = 11,
	Dedue_12_SBI = 12,
	Felix_13_SBI = 13,
	Ashe_14_SBI = 14,
	Sylvain_15_SBI = 15,
	Mercedes_16_SBI = 16,
	Annette_17_SBI = 17,
	Ingrid_18_SBI = 18,
	Lorenz_19_SBI = 19,
	Raphael_20_SBI = 20,
	Ignatz_21_SBI = 21,
	Lysithea_22_SBI = 22,
	Marianne_23_SBI = 23,
	Hilda_24_SBI = 24,
	Leonie_25_SBI = 25,
	Seteth_26_SBI = 26,
	Flayn_27_SBI = 27,
	Hanneman_28_SBI = 28,
	Manuela_29_SBI = 29,
	Gilbert_30_SBI = 30,
	Alois_31_SBI = 31,
	Catherine_32_SBI = 32,
	Shamir_33_SBI = 33,
	Cyril_34_SBI = 34,
	Jeralt_35_SBI = 35,
	Rhea_36_SBI = 36,  
	InvalidSothis_SBI = 37, 
	
	Yuri_SBI = 38,
	Balthus_SBI = 39,
	Constance_SBI = 40,
	Hapi_SBI = 41,
	idkAelfric_SBI = 42,
	Jeritza_Playable_SBI = 43,
	Anna_Playable_SBI = 44,
};

struct UnitPreferences{ //0
	for (j = 0; j < EntryCount; j++){
		struct Unit {
			Names character<bgcolor=cRed>;
			Preferences Choir<name="Choir Preference", bgcolor=cSilver>;
			Preferences Cooking<name="Cooking Preference", bgcolor=cLtBlue>;
			short unkShort0x4;
		}preferences<name="Unit", read=EnumToString(character)>;
	}
};

struct sShareAMeal{ //1
	for (j = 0; j < EntryCount; j++){
		struct sShareAMealData {
			local Meal name=j;
			
			struct {
            	MiscItem Ingredient;
                byte ingredentMSB<hidden=true>;
            }Ingredients[3]<read=EnumToString(Ingredient)>;
			ubyte unkByte0x6;
			ubyte unkByte0x7;
			
			ubyte unkByte0x8;
			ubyte unkByte0x9;
			FactionMealPreference Faction;
			ubyte unkByte0xb;
			
			ubyte unkByte0xc;
			ubyte unkByte0xd;
			ubyte IngredientsCost[3];
			ubyte Padding;
		}mealPreferences<name="Meals", bgcolor=cSilver, read = EnumToString(name)>;
	}
};

struct Mealstuff{ //2
	for (j = 0; j < EntryCount; j++){
		struct MealPreferences {
			local Meal name=j;
			for(k =0; k<45;k++){
				struct sCharacterPreference{
					local SaveBlockID SaveID=k;
					Preferences Preference;
				}CharacterPreference<read=Str("%-9s - %s",EnumToString(Preference), EnumToString(SaveID))>;
			}
		}mealPreferences<name="Meal Preferences", bgcolor=cSilver, read = EnumToString(name)>;
	}
};

struct File {
    int count<bgcolor=cBlack>;
    struct PointerPair {
        int start<format=hex>;
        int length<format=hex>;
    } pointertable[count]<bgcolor=cRed>;
    
    local int i,j,k = 0;
    for(i = 0; i < count; i++){
        FSeek(pointertable[i].start);
        struct Entry {
        	local string name;
            int magic<bgcolor=cLtGreen>; // should be 00 19 12 16
            if (magic != 0x16121900) Exit(-1);
            int EntryCount<bgcolor=cLtGreen>;
            int Size<bgcolor=cLtGreen>;                
            int Padding[13]<bgcolor=cYellow>;

            if(Size == 12)//tourney data
            {
                TourneyData tourneyData[EntryCount];
                name = "Tourney";
            }
            else if(i==0){
            	UnitPreferences ActivityPreferences;
                name="Activity Preferences";
            }
            else if(i==1){
            	sShareAMeal Meals;
                name="Meals";
            }
            else if(i==2){
            	Mealstuff MealPreference;
                name="Meals Preference";
            }
            else //other stuff, use generic struct in that case
            {
                struct Entires {
                    byte unk[entry.Size]<bgcolor=cBlue>;
                }entires[EntryCount];
                name = Str("Table %d",i);
            }
        } entry<name=name>;
    }
} file;

