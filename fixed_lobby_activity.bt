//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: fixed_lobby_activity.bin
//   Authors: [FF7] Sephiroth & Joschuka 
//   Version: 1.00
//   Purpose: Three Houses Tournament file mapping
//   History
//   1.00    2020-11-14   [FF7] Sephiroth - started this
//------------------------------------------------
LittleEndian();
#include "3H_Enums.bt"

typedef struct TOURNEYDATA {

ubyte unk0<bgcolor=cBlue,name="For Replacement slot", comment="Set to 255 for no replacement(allow a clone.). Match this to specify an alternative character slot if Character Base is recruited to the player's party.">;
byte unk1<bgcolor=cBlue,name="Possibly gender", comment="put a comment here">;
Names unk2<bgcolor=cBlue,name="Character Base (CharID)", comment="See Person Data">;
EquipID unk4<bgcolor=cBlue,name="Accessory (EquipID)", comment="Some like Shield of Seiros may get downgraded if the player has obtained one">;
ClassName unk5<bgcolor=cBlue,name="Class", comment="Opponent Class">;
WeapID unk6<bgcolor=cBlue,name="Weapon, add 10", comment="Some like (+) get downgraded">;
SpellID unk7<bgcolor=cBlue,name="Magic", comment="Spell list may be elsewhere & may have spell list / skill requirement. Weapon needs to be 255">;
AbilityID unk8<bgcolor=cBlue,name="Ability 1", comment="Ability slots #4 & #5 location unknown">;
AbilityID unk9<bgcolor=cBlue,name="Ability 2", comment="Ability slots #4 & #5 location unknown">;
AbilityID unk10<bgcolor=cBlue,name="Ability 3", comment="Ability slots #4 & #5 location unknown">;
byte unk11<bgcolor=cBlue,name="unk0", comment="A total mystery">;

}TourneyData;

enum<byte> Preferences {
    Neutral_p = 0,
    Like_p = 1,
    Dislike_p = -1,

};

struct UnitPreferences{ //0
	for (j = 0; j < EntryCount; j++){
		struct Unit {
			Names character<bgcolor=cRed>;
			Preferences Choir<name="Choir Preference", bgcolor=cSilver>;
			Preferences Cooking<name="Cooking Preference", bgcolor=cLtBlue>;
			short unkShort0x4;
		}preferences<name="Unit", read=EnumToString(character)>;
	}
};


struct File {
    int count<bgcolor=cBlack>;
    struct PointerPair {
        int start<format=hex>;
        int length<format=hex>;
    } pointertable[count]<bgcolor=cRed>;
    
    local int i,j = 0;
    for(i = 0; i < count; i++){
        FSeek(pointertable[i].start);
        struct Entry {
        	local string name;
            int magic<bgcolor=cLtGreen>; // should be 00 19 12 16
            if (magic != 0x16121900) Exit(-1);
            int EntryCount<bgcolor=cLtGreen>;
            int Size<bgcolor=cLtGreen>;                
            int Padding[13]<bgcolor=cYellow>;

            if(Size == 12)//tourney data
            {
                TourneyData tourneyData[EntryCount];
                name = "Tourney";
            }
            else if(i==0){
            	UnitPreferences ActivityPreferences;
                name="Activity Preferences";
            }
            else //other stuff, use generic struct in that case
            {
                struct Entires {
                    byte unk[entry.Size]<bgcolor=cBlue>;
                }entires[EntryCount];
                name = Str("Table %d",i);
            }
        } entry<name=name>;
    }
} file;

