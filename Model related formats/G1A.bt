//------------------------------------------------
//--- 010 Editor v9.1.0 Binary Template
//
//      File: Koei Tecmo Animation
//   Authors: HealingBrew, Lucas Cone
//   Version: 1.3
//   Purpose: Parsing G2A animations
//  Category: File Format
// File Mask: *.g2a; *.g1a
//  ID Bytes: /
//   History:
//   1.3    2019-12-30 healingbrew: Normalized file.
//   1.2    2019-12-26 Lukas Cone: Updated structures.
//   1.1    2019-11-14 healingbrew: Update with RE'd structure
//   1.0    2019-11-14 healingbrew: Update with more accurate structure
//   1.0    2019-11-10 healingbrew: Made the original file
//------------------------------------------------

LittleEndian();

#include "G1SharedStructures.bt"

typedef struct G1APACKEDFRAMEINFO {
    int unknown1_count : 12,
        unknown2 : 6,
        frame_header_blob_size : 12,
        unknown3 : 2;
    // local int frame_header_size = (packed_data >> 18) & 0x3FFC;
    // local int unknown_count = (packed_data & 0xFFF);
} G1APackedFrameInfo;

typedef enum<short> {
    Rotation,
    Position,
    Scale
}G2AKeyframeType;

typedef struct G1AFRAMESPLINE {
    G2AKeyframeType type<name="Spline Type">;
    ushort bone_count<name="Bone Count">;
    uint first_matrix<name="First Matrix">;
    ushort bones[bone_count]<name="Bone IDs">;
    G1Helper_AlignBytes(4);
} G1AFrameSpline;

typedef struct G1AFRAMEHEADER {
    int spline_count : 2,
        next_header_offset : 10,
        data_offset : 20;
} G1AFrameHeader;

typedef struct G1AFRAME {
    G1AFrameHeader header;
    local int locp = FTell();
    FSeek(parentof(this).startp + header.data_offset + parentof(this).packed_data.frame_header_blob_size);
    G1Helper_AlignBytesReverse(4);
    G1AFrameSpline frame[header.spline_count]<name="splines", optimize=false>;
    FSeek(locp);
} G1AFrame;

typedef struct G2ASTRUCTURE {
    GResourceSectionHeader header<name="Header", read=GetSectionName>;
    float fps<name="Framerate", comment="Probably">;

    G1APackedFrameInfo packed_data<name="Packed Data">;
    int frame_size<name="Frame blob size">;
    int matrix_count<name="Matrix Count">;
    int unknown1_count<name="Unknown 1">;

    local int frame_count = packed_data.frame_header_blob_size / sizeof(G1AFRAMEHEADER);

    local int startp = FTell();
    G1AFrame frames[frame_count]<name="Frames", optimize=false>;
    FSeek(startp + frame_size);
    HalfMatrix44 matrices[matrix_count]<name="Matrices">;
} G1AStructure;

G1AStructure File<name="G1A", open=true>;
