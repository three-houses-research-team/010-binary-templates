//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: BGM.ktsl2stbin
//   Authors: DeathChaos
//   Version: 1.01
//   Purpose: Koei Tecmo container for BGM
//   Category:  
//   File Mask: 
//   ID Bytes: KTSR
//   History
//   1.00    2019-08-05  DeathChaos - started this
//   1.01    2019-08-06  DeathChaos - Minor Code Cleanup
//------------------------------------------------

LittleEndian();

local TFindResults r = FindAll( "KTSS" );
local int KTSSNum = r.count;

struct File{
	struct HEADER{
		char magic[4]; // "KTSR"
		uint32 Unknown1; // Always 0xFCDD9402 for every game if the file contains KTSS sections, different if not.
		ubyte Unknown2; // Flags/Endianness?
		ushort Unknown3;
		ubyte Version; // "4" for FETH.
		uint32 Unknown4; // 0xB75674CE for FETH, the same for every ktsl2stbin file, but different for other games. Game specific value.
		uint64 Padding1;
		struct FileSizeValue{
			uint32 FileSize<name="Total Filesize">;
			uint32 FileSize<name="Total Filesize">;
		}filesizevalue<name="Filesize">;
		byte padding[FTell() % 64]<name="Header EoF padding">; // align 0x40
	}header<bgcolor=cYellow,name="KTSR Header">;
	struct BGMHeader{
		uint32 UnkPointer<bgcolor=cRed,name="Unknown Pointer/Checksum">;  // Always 0x15F4D409 for every game if the section is KTSS.
		uint32 TotalSoundSize<bgcolor=cRed,name="Total Size of this Sound">; // size until next pointer, KTSS should be 0x3C after this
		uint32 pointer<bgcolor=cRed,name="Unknown Pointer/Checksum">; // Always a value that links up to a smaller ktsl2stbin file, which can be found inside DATA1.bin and does not contain KTSS sections. The EN ktsl2stbin files also use the same value.
		ushort Unknown1<bgcolor=cRed>; // Flags? Always 40 00 for ktsl2stbin with KTSS sections, 02 00 for smaller ktsl2stbin files found inside WO4. 00 00 for smaller ktsl2stbin files inside FETH DATA1.bin.
		ushort Unknown2<bgcolor=cRed>; // Section Type? 00 00 for ktsl2stbin with KTSS sections, 01 00 for smaller ktsl2stbin files inside WO4 and FETH DATA1.bin
		uint32 SizeAfterPaddingOfThisStruct<bgcolor=cRed,name="Size without padding?">; // Value always matches up to the value after KTSS magic.
		struct PADDING2{
			uint32 pointer<bgcolor=cRed>;
			uint32 pointer<bgcolor=cRed>;
			uint32 pointer<bgcolor=cRed>;
			uint64 padding;
			uint64 padding;
			uint64 padding;
			uint64 padding;
		}padding2<name="Padding">;
		byte section[TotalSoundSize-64]<name="Sound File",bgcolor=cPurple>; // filesize is included in the header which is 0x40 size
		//byte padding[FTell() % 64]<name="EoF padding">; // align 0x40
	}bgmheader[KTSSNum]<bgcolor=cBlue,optimize=false,name="Sound Archive">;
}file<name="KTSR File">;
