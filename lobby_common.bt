//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: fixed_lobby_common.bin / 24.bin / previously known as TeaTime.bin
//   Authors: DeathChaos, Triabolical, ReichardTheThird
//   Version: 1.01
//   Purpose: Three Houses character file mapping
//   History
//	 1.01	 ----------  Triabolical - added Tea time topic responses
//   1.00    2019-08-31  DeathChaos - started thisProficiencies
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------
#include "3H_Enums.bt"

LittleEndian();

local int i<hidden=true>;
struct File{
	struct SectionPointers{
		uint32 NumberOfSectionPointers;
		uint32 PointerToUnk1<bgcolor=cRed>;
		uint32 Unk1StructSize<bgcolor=cRed>;
		uint32 PointerToUnk2<bgcolor=cBlue>;
		uint32 Unk2StructSize<bgcolor=cBlue>;
		uint32 PointerToUnk3<bgcolor=cPurple>;
		uint32 Unk3StructSize<bgcolor=cPurple>;
		uint32 PointerToUnk4<bgcolor=cDkBlue>;
		uint32 Unk4StructSize<bgcolor=cDkBlue>;
		uint32 PointerToRecruitRanks<bgcolor=cDkYellow>;
		uint32 RecruitRanksStructSize<bgcolor=cDkYellow>;
		uint32 PointerToUnk5<bgcolor=cBlack>;
		uint32 Unk5StructSize<bgcolor=cBlack>;
		uint32 PointerToUnk6<bgcolor=cGreen>;
		uint32 Unk6StructSize<bgcolor=cGreen>;
		uint32 PointerToUnk7<bgcolor=cDkRed>;
		uint32 Unk7StructSize<bgcolor=cDkRed>;
		uint32 PointerToUnk8<bgcolor=cDkPurple>;
		uint32 Unk8StructSize<bgcolor=cDkPurple>;
		uint32 PointerToUnk9<bgcolor=cDkGreen>;
		uint32 Unk9StructSize<bgcolor=cDkGreen>;
		uint32 PointerToFavTeaLeaves<bgcolor=cLtGreen>;
		uint32 FavTeaLeavesStructSize<bgcolor=cLtGreen>;
		uint32 PointerToFinalComment<bgcolor=cLtRed>;
		uint32 FinalCommentStructSize<bgcolor=cLtRed>;
		uint32 PointerToTeaAnswers1<bgcolor=cLtBlue>;
		uint32 TeaAnswers1StructSize<bgcolor=cLtBlue>;
		uint32 PointerToTeaAnswers2<bgcolor=cLtPurple>;
		uint32 TeaAnswers2StructSize<bgcolor=cLtPurple>;
		
	}sectionpointers<name="Section Pointers">;
	
	FSeek(sectionpointers.PointerToUnk1);
	struct Unk1{
		uint32 Unk1Magic;
		uint32 numunk1;
		uint32 SizeOfUnk1;
		struct Unk1Padding{
			byte Padding[0x34];
		}unk1padding<name="Padding">;
		struct UnknownSection1{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection1[numunk1]<name="Unknown Section1">;
	}unk1<name="Unknown Section 1",bgcolor=cRed>;
	
	FSeek(sectionpointers.PointerToUnk2);
	struct Unk2{
		uint32 Unk2Magic;
		uint32 numunk2;
		uint32 SizeOfUnk2;
		struct Unk2Padding{
			byte Padding[0x34];
		}unk2padding<name="Padding">;
		struct UnknownSection2{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection2[numunk2]<name="Unknown Section2">;
	}unk2<name="Unknown Section 2",bgcolor=cBlue>;
	
	FSeek(sectionpointers.PointerToUnk3);
	struct Unk3{
		uint32 Unk3Magic;
		uint32 numunk3;
		uint32 SizeOfUnk3;
		struct Unk3Padding{
			byte Padding[0x34];
		}unk3padding<name="Padding">;
		struct UnknownSection3{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection3[numunk3]<name="Unknown Section3">;
	}unk3<name="Unknown Section 3",bgcolor=cPurple>;
	
	FSeek(sectionpointers.PointerToUnk4);
	struct Unk4{
		uint32 Unk4Magic;
		uint32 numunk4;
		uint32 SizeOfUnk4;
		struct Unk4Padding{
			byte Padding[0x34];
		}unk4padding<name="Padding">;
		struct UnknownSection4{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection4[numunk4]<name="Unknown Section4">;
	}unk4<name="Unknown Section 4",bgcolor=cDkBlue>;
	
	FSeek(sectionpointers.PointerToRecruitRanks);
	struct RecruitRanks{
		uint32 RecruitRanksMagic;
		uint32 numRecruitRanks;
		uint32 SizeOfRecruitRanks;
		struct RecruitRanksPadding{
			byte Padding[0x34];
		}recruitrankspadding<name="Padding">;
		struct RecruitRank{
			CharID charID<name="Character">;
			uint16 unk1<name="Story Flags?">;
			uint16 unk2<name="Always FF FF">;
			ClassName BeginnerClass<name="Starting Class">;
			Level LvReq<name="Level Required">;
			ClassName IntermediateClass<name="Intermediate Class">;
			CharStat StatReq2<name="Stat Type Required">;
			RankStats WepRnkTypeReq<name="Weapon Rank Type Required">;
			MinRanks Req<name="Weapon Rank Required">;
			ubyte SylvainFlag<name="The Sylvain Flag">;
			ubyte StatReq1<name="Stat Amount Required">;
		}recruitrank[numRecruitRanks]<name="Recruit Conditions",read=GetName>;
	}recruitranks<name="Recruit Conditions",bgcolor=cDkYellow>;
	
	FSeek(sectionpointers.PointerToUnk5);
	struct Unk5{
		uint32 Unk5Magic;
		uint32 numunk5;
		uint32 SizeOfUnk5;
		struct Unk5Padding{
			byte Padding[0x34];
		}unk5padding<name="Padding">;
		struct UnknownSection5{
			ubyte unk;
			ubyte unk;
			ubyte unk;
			ubyte unk;
			ubyte unk;
			ubyte unk;
		}unknownsection5[numunk5]<name="Unknown Section4">;
	}unk5<name="Unknown Section 5",bgcolor=cBlack>;
	
	FSeek(sectionpointers.PointerToUnk6);
	struct Unk6{
		uint32 Unk6Magic;
		uint32 numunk6;
		uint32 SizeOfUnk6;
		struct Unk6Padding{
			byte Padding[0x34];
		}unk6padding<name="Padding">;
		struct UnknownSection6{
			ubyte unk;
			ubyte unk;
			ubyte unk;
			ubyte unk;
			ubyte unk;
			ubyte unk;
		}unknownsection6[numunk6]<name="Unknown Section4">;
	}unk6<name="Unknown Section 6",bgcolor=cGreen>;
	
	FSeek(sectionpointers.PointerToUnk7);
	struct UnknownSection7{
		uint32 unk7Magic;
		uint32 numunk7;
		uint32 SizeOfunk7;
		struct Unk7Padding{
			byte Padding[0x34];
		}unk7padding<name="Padding">;
		struct Unk7{
			CharID charID<name="Character">;
			uint16 unk1<name="Story Flags?">;
			uint16 unk2<name="Always FF FF">;
			ClassName BeginnerClass<name="Starting Class">;
			Level LvReq<name="Level Required">;
			ClassName IntermediateClass<name="Intermediate Class">;
			CharStat StatReq2<name="Stat Type Required">;
			RankStats WepRnkTypeReq<name="Weapon Rank Type Required">;
			MinRanks Req<name="Weapon Rank Required">;
			ubyte SylvainFlag<name="The Sylvain Flag">;
			ubyte StatReq1<name="Stat Amount Required">;
		}unk7[numunk7]<name="Recruit Conditions 2",read=GetName2>;
	}unknownsection7<name="Recruit Conditions 2",bgcolor=cDkRed>;
	
	FSeek(sectionpointers.PointerToUnk8);
	struct Unk8{
		uint32 Unk8Magic;
		uint32 numunk8;
		uint32 SizeOfUnk8;
		struct Unk8Padding{
			byte Padding[0x34];
		}unk8padding<name="Padding">;
		struct UnknownSection8{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection8[numunk8]<name="Unknown Section8">;
	}unk8<name="Unknown Section 8",bgcolor=cDkPurple>;
		
	FSeek(sectionpointers.PointerToUnk9);
	struct Unk9{
		uint32 Unk9Magic;
		uint32 numunk9;
		uint32 SizeOfUnk9;
		struct Unk9Padding{
			byte Padding[0x34];
		}unk9padding<name="Padding">;
		struct UnknownSection9{
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
			uint16 unk;
		}unknownsection9[numunk9]<name="Unknown Section9">;
	}unk9<name="Unknown Section 9",bgcolor=cDkGreen>;
	
	FSeek(sectionpointers.PointerToFavTeaLeaves);
	struct FavoriteTeaLeaves{
		uint32 TeaMagic;
		uint32 numFavoriteTea;
		uint32 SizeOfFavoriteTea;
		struct TeaPadding{
			byte Padding[0x34];
		}teapadding<name="Padding">;
		struct FavoriteTea{
			ubyte unk;
			CharID CharacterID;
			ubyte unk;
			ubyte unk;
			ubyte unk;
			MiscItem tea<name="Favorite Tea">;
			MiscItem tea<name="Favorite Tea">;
			MiscItem tea<name="Favorite Tea">;
			MiscItem tea<name="Favorite Tea">;
		}favoritetea[numFavoriteTea]<name="Favorite Tea Leaves",read=GetName3>;
	}favoritelealeaves<name="Favorite Tea Leaves",bgcolor=cLtGreen>;
	
	FSeek(sectionpointers.PointerToFinalComment);
	struct FinalComment{
		uint32 TeaMagic;
		uint32 numFinalComment;
		uint32 SizeOfFinalComment;
		struct CommentPadding{
			byte Padding[0x34];
		}commentpadding<name="Padding">;
		struct FinalTeaComment{
			CharID CharacterID;
			ubyte unk;
			ubyte CommentID;
			TrueFalse Nod;
			TrueFalse Laugh;
			TrueFalse Commend;
			TrueFalse Disagree;
			TrueFalse Admonish;
			TrueFalse Sigh;
			TrueFalse Chat;
			TrueFalse SipTea;
			TrueFalse Blush;
			TrueFalse Praise;
			ubyte pad;
		}finalteacomment[numFinalComment]<name="Final Comment",read=GetName4>;
	}finalcomment<name="Final Comment",bgcolor=cLtRed>;
	
    FSeek(sectionpointers.PointerToTeaAnswers1);
	struct TeaTopics{ //12
		uint32 Unk5Magic;
		uint32 numunk5;
		uint32 SizeOfUnk5;
		byte Padding[0x34];
		for (i = 0; i < numunk5; ++i){
			struct TeaResponse {
				byte response[SizeOfUnk5];
			}answer;
		}
		byte padding[2]<hidden=true>;
	}tea;
	
	FSeek(sectionpointers.PointerToTeaAnswers2);
	TeaTopics Tea2<name="Tea Time Topic Responses 2",bgcolor=cLtRed>; //13
	
}file;

string GetName(RecruitRank& value)
{
    return EnumToString(value.charID);
}

string GetName2(Unk7& value)
{
    return EnumToString(value.CharacterID);
}

string GetName4(FinalTeaComment& value)
{
    return EnumToString(value.CharacterID);
}

string GetName3(FavoriteTea& value)
{
    return EnumToString(value.CharacterID);
}